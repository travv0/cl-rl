(in-package #:rl)

(defvar *player*)
(defun player () *player*)

(define-class player (alive visible solid humanoid)
  ((%strength :initform 5)
   (%dexterity :initform 5)
   (%endurance :initform 5)
   (%vitality :initform 5)
   (%resistance :initform 5)
   (%intelligence :initform 5)
   (%faith :initform 5)
   (%inventory :initform (make-inventory (make-instance 'health-potion :charges 5)
                                         (make-instance 'sword)
                                         (make-instance 'kite-shield)))
   (%view-distance :initform 40 :accessor view-distance)))

(defun update-can-see ()
  (destructuring-bind (start-x start-y end-x end-y) (chunk-range-to-show)
    (loop for y from start-y below end-y do
      (loop for x from start-x below end-x do
        (when (or (= x start-x)
                  (= x (1- end-x))
                  (= y start-y)
                  (= y (1- end-y)))
          (loop for obj in (get-objects-at-pos *player*) do
            (ensure-mix obj 'can-see))
          (block pos-loop
            (loop with hit-opaque = nil
                  for distance from (view-distance *player*) downto 0
                  for pos in (rest (get-line *player* (pos x y)))
                  do (when-let ((obj (get-object-at-pos pos)))
                       (unless (plusp distance)
                         (return-from pos-loop))
                       (unless (typep obj 'can-see)
                         (ensure-mix obj 'can-see))
                       (when (typep obj 'opaque)
                         (setf hit-opaque t)))
                     (when hit-opaque
                       (return-from pos-loop))))))))
  (with-accessors ((x x) (y y)) *player*
    (flet ((visible-pos (check-x check-y)
             (and (not (typep (get-visible-object-at-pos (pos check-x check-y)) 'opaque))
                  (some (op (typep _1 'can-see))
                        (get-objects-at-pos (pos check-x check-y))))))
      (loop for obj in *game-objects*
            when (and (typep obj 'opaque) (not (typep obj 'can-see)))
              do (when (or (and (>= x (x obj))
                                (>= y (y obj))
                                (and (visible-pos (1+ (x obj)) (y obj))
                                     (visible-pos (x obj) (1+ (y obj)))))
                           (and (<= x (x obj))
                                (>= y (y obj))
                                (and (visible-pos (1- (x obj)) (y obj))
                                     (visible-pos (x obj) (1+ (y obj)))))
                           (and (<= x (x obj))
                                (<= y (y obj))
                                (and (visible-pos (1- (x obj)) (y obj))
                                     (visible-pos (x obj) (1- (y obj)))))
                           (and (>= x (x obj))
                                (<= y (y obj))
                                (and (visible-pos (1+ (x obj)) (y obj))
                                     (visible-pos (x obj) (1- (y obj))))))
                   (ensure-mix obj 'can-see))))))
